{"backend_state":"init","connection_file":"/projects/32f31ee3-50e6-4896-a9de-cba73af32175/.local/share/jupyter/runtime/kernel-4b61e805-2617-447c-a691-aabcf9cdb712.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"name":"linear_regression_numpy_tutorial.ipynb","provenance":[]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1658772147824,"exec_count":1,"id":"dfb689","input":"# import libraries \nimport numpy as np\nimport matplotlib.pyplot as plt","kernel":"python3-ubuntu","metadata":{"executionInfo":{"elapsed":31,"status":"ok","timestamp":1627498066861,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"IecuRdF1a-sG"},"pos":1,"start":1658772147812,"state":"done","type":"cell"}
{"cell_type":"code","end":1658772149186,"exec_count":2,"id":"984536","input":"# initialize your random seed to ensure reproducibility of your result\nnp.random.seed(42) # Why 42 (It works well for computer science) - https://medium.com/@leticia.b/the-story-of-seed-42-874953452b94\n\n# randomly generate x which is a vector of 100 points \nx = np.random.rand(100, 1)\n\n# define exact linear function y = 1 + 2x + epsilon where epsilon (0.1*random numbers)\ny = 1 + 2 * x + .1 * np.random.randn(100, 1)","kernel":"python3-ubuntu","metadata":{"executionInfo":{"elapsed":219,"status":"ok","timestamp":1627498568931,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"BYHvay0xa-sK"},"pos":3,"start":1658772149182,"state":"done","type":"cell"}
{"cell_type":"code","end":1658772153390,"exec_count":3,"id":"3835af","input":"# Shuffles the indices\nidx = np.arange(100)\nnp.random.shuffle(idx)\n\n# Uses first 80 random indices for train\ntrain_idx = idx[:80]\n\n# Uses the remaining indices for validation\nval_idx = idx[80:]\n\n# Generates train and validation sets\nx_train, y_train = x[train_idx], y[train_idx]\nx_val, y_val = x[val_idx], y[val_idx]\n","kernel":"python3-ubuntu","metadata":{"executionInfo":{"elapsed":235,"status":"ok","timestamp":1627498579768,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"_ntl2sX3a-sL"},"pos":5,"start":1658772153352,"state":"done","type":"cell"}
{"cell_type":"code","end":1658772157472,"exec_count":4,"id":"e0144c","input":"plt.figure(figsize=(10,5))\n\n# plot the train set \nplt.subplot(1,2,1)\nplt.scatter(x_train,y_train, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\n\n# plot the validation set \nplt.subplot(1,2,2)\nplt.scatter(x_val,x_val)  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\n\nplt.show()","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":359},"executionInfo":{"elapsed":524,"status":"ok","timestamp":1627498583872,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"W1JhyZ_Na-sM","outputId":"909f5fd9-c203-45cf-d41f-58b09bb727ef"},"output":{"0":{"data":{"image/png":"c6f83e5e3f352ba510dd00f5ea1f95e01eb68f8f","text/plain":"<Figure size 720x360 with 2 Axes>"},"metadata":{"image/png":{"height":342,"width":621},"needs_background":"light"}}},"pos":7,"start":1658772156513,"state":"done","type":"cell"}
{"cell_type":"code","end":1658772163728,"exec_count":5,"id":"8f031d","input":"# initialize your random seed to ensure reproducibility of your result\nnp.random.seed(42)\n\n# Initializes parameters \"a\" and \"b\" randomly - they don't need to be good yet\na = np.random.randn(1)\nb = np.random.randn(1)\n\n# print values of a and b \nprint(a, b)\n","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":241,"status":"ok","timestamp":1627498594869,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"MjeQPrOKa-sP","outputId":"fe881c09-932e-46f0-9f40-79b6b5c69617"},"output":{"0":{"name":"stdout","text":"[0.49671415] [-0.1382643]\n"}},"pos":9,"start":1658772163718,"state":"done","type":"cell"}
{"cell_type":"code","end":1658772167256,"exec_count":6,"id":"8c3e9b","input":"# Initialization of hyper-parameters (in our case, only learning rate and number of epochs)\n\n# Sets learning rate (how much the AI conforms to each set of feedbacks)\nlr = 1e-1\n# Defines number of epochs (how many times training is repeated)\nn_epochs = 1000","kernel":"python3-ubuntu","metadata":{"executionInfo":{"elapsed":240,"status":"ok","timestamp":1627498605594,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"xaIPfjB1a-sP"},"pos":10,"start":1658772167245,"state":"done","type":"cell"}
{"cell_type":"code","end":1658772172886,"exec_count":7,"id":"336fe1","input":"for epoch in range(n_epochs):\n    # Computes our model's predicted output\n    yhat = a + b * x_train\n    \n    # How wrong is our model? That's the error! \n    error = (y_train - yhat)\n    \n    # It is a regression, so it computes mean squared error (MSE)\n    loss = (error ** 2).mean()\n    \n    # Computes gradients for both \"a\" and \"b\" parameters\n    a_grad = -2 * error.mean()\n    b_grad = -2 * (x_train * error).mean()\n    \n    # Updates parameters using gradients and the learning rate\n    a = a - lr * a_grad\n    b = b - lr * b_grad\n    \nprint(a, b)","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":230,"status":"ok","timestamp":1627499222901,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"IEGhbnhoa-sQ","outputId":"6df14990-801c-4030-bd27-e2c19b95c577"},"output":{"0":{"name":"stdout","text":"[1.02354094] [1.96896411]\n"}},"pos":12,"start":1658772172839,"state":"done","type":"cell"}
{"cell_type":"code","end":1658772176332,"exec_count":8,"id":"3a5353","input":"plt.figure(figsize=(10,5))\ny_vals = b + a * x_val\nplt.plot(x_val, y_vals, '--')\n\nplt.scatter(x_val,y_val, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\nplt.show()","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":359},"executionInfo":{"elapsed":229,"status":"ok","timestamp":1627499225902,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"V9wnGeT_eou8","outputId":"1dc573e8-ebd4-4861-94e0-ff1a6d4229d3"},"output":{"0":{"data":{"image/png":"f8d7a4420887c97d2cdf014bdefefbb57e889166","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"image/png":{"height":342,"width":625},"needs_background":"light"}}},"pos":13,"start":1658772175998,"state":"done","type":"cell"}
{"cell_type":"code","end":1658772192828,"exec_count":10,"id":"2bb536","input":"from sklearn.linear_model import LinearRegression\nlinr = LinearRegression()\nlinr.fit(x_train, y_train)\nprint(linr.intercept_, linr.coef_[0])","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":885,"status":"ok","timestamp":1627498630865,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"jkPf0bt4a-sV","outputId":"422ab4c2-fceb-490e-ca2d-b45f09b26cff"},"output":{"0":{"name":"stdout","text":"[1.02354075] [1.96896447]\n"}},"pos":15,"start":1658772192816,"state":"done","type":"cell"}
{"cell_type":"code","id":"02d306","input":"","metadata":{"id":"l5xP_R3ya-sZ"},"pos":18,"type":"cell"}
{"cell_type":"code","id":"07df88","input":"","metadata":{"id":"mdxlUKLka-sZ"},"pos":20,"type":"cell"}
{"cell_type":"code","id":"184182","input":"","metadata":{"id":"ox6WlPb7a-sa"},"pos":25,"type":"cell"}
{"cell_type":"code","id":"1d8e64","input":"","metadata":{"id":"VPv4Rha8a-sa"},"pos":23,"type":"cell"}
{"cell_type":"code","id":"348e33","input":"","metadata":{"id":"8vkl-uJMa-sZ"},"pos":19,"type":"cell"}
{"cell_type":"code","id":"481a8f","input":"","metadata":{"id":"bUuZFIRxa-sZ"},"pos":21,"type":"cell"}
{"cell_type":"code","id":"64aafa","input":"","metadata":{"id":"7ubqNNVxa-sZ"},"pos":22,"type":"cell"}
{"cell_type":"code","id":"a1ff62","input":"","metadata":{"id":"cvxyHdHha-sa"},"pos":24,"type":"cell"}
{"cell_type":"code","id":"c830e8","input":"","metadata":{"id":"owTTVO4Ba-sY"},"pos":17,"type":"cell"}
{"cell_type":"markdown","id":"387ea4","input":"## Data Generation","metadata":{"id":"JlrQHpg8a-sI"},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"3da1c8","input":"## plot the train and validation sets","metadata":{"id":"DCCwyhkya-sM"},"pos":6,"type":"cell"}
{"cell_type":"markdown","id":"4a4f18","input":"## The results!\n\nThey match up to 6 decimal places — we have a fully working implementation of linear regression using Numpy.","metadata":{"id":"yE4V3P9aa-sX"},"pos":16,"type":"cell"}
{"cell_type":"markdown","id":"73805f","input":"## linear regression using numpy ","metadata":{"id":"gi4pQP8Ia-sO"},"pos":8,"type":"cell"}
{"cell_type":"markdown","id":"854584","input":"# Linear regression using NumPy","metadata":{"id":"K_X2fB9ta-rv"},"pos":0,"type":"cell"}
{"cell_type":"markdown","id":"974c05","input":"### For each epoch, there are 5 training steps:\n* Compute model’s predictions \n* Compute the error (the difference between the actual value and predicted value) \n* Compute the loss ( mean square error = the average of (error)^2)\n* Compute the gradients for every parameter (require calculus)\n* Update the parameters a and b","metadata":{"id":"Tmk5nl_Va-sQ"},"pos":11,"type":"cell"}
{"cell_type":"markdown","id":"b8317d","input":"## check our results use Scikit-learn's linear regression\n\nJust to make sure we haven’t done any mistakes in our code, we can use Scikit-Learn’s Linear Regression to fit the model and compare the coefficients.\n\nhttps://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html","metadata":{"id":"cbeaQMpna-sR"},"pos":14,"type":"cell"}
{"cell_type":"markdown","id":"e77e3f","input":"## split data into train and validation sets (80/20)","metadata":{"id":"irEOBQoca-sL"},"pos":4,"type":"cell"}
{"id":0,"time":1658772146033,"type":"user"}
{"last_load":1658772143146,"type":"file"}