{"backend_state":"init","connection_file":"/projects/32f31ee3-50e6-4896-a9de-cba73af32175/.local/share/jupyter/runtime/kernel-09c68374-63e6-4dcc-acda-586bf1f06393.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"a9b664","input":"","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"d713cb","input":"import pandas as pd","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"52d284","input":"airlines_df = airlines[['Airline','Flight','AirportFrom','AirportTo','DayOfWeek','Time','Length','Delay']]\nfig = px.scatter_matrix(airlines,dimensions=['Airline','Flight','AirportFrom','AirportTo','DayOfWeek','Time','Length','Delay'],color=\"Delay\")\n# fig = px.scatter_matrix(airlines,dimensions=['AirportFrom','Delay'],color=\"Airline\")\n# fig = px.scatter_matrix(airlines_df)\nfig.update_traces(diagonal_visible=False)\nfig.show()","output":{"0":{"data":{"iframe":"f80319cc637fb4d1cb67963f21397c15d2d094de"},"exec_count":23,"output_type":"execute_result"}},"pos":9,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"4c7f3f","input":"import plotly.express as px","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":34,"id":"e36ee3","input":"columns_to_drop = ['id']\n\n#Drop the columns using drop()\nairlines.drop(columns_to_drop, axis=1, inplace = True)","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":35,"id":"eaa9ff","input":"# airlines[\"AirportFrom\"].drop_duplicates()\n\n# airlines[[\"AirportFrom\",\"Delay\"]].head(293)\n\n# airlines.plot.scatter(x='AirportFrom',y='Delay')\n\nfig = px.scatter(airlines, x=\"AirportFrom\", y=\"Delay\")\n\nfig.show()","output":{"0":{"data":{"iframe":"21a3f1a8708130803597d76824085c6dd793395a"},"exec_count":35,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":36,"id":"2070b8","input":"import pandas as pd\nimport plotly.express as px\ndata = pd.read_csv(\"./Data/Airlines.csv\")\ndata.drop('id', axis=1, inplace=True)\ndf = data[['AirportFrom','Delay']].groupby('AirportFrom').agg('count').reset_index()\ndf.head(293)","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>AirportFrom</th>\n      <th>Delay</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ABE</td>\n      <td>342</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ABI</td>\n      <td>211</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ABQ</td>\n      <td>2799</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ABR</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ABY</td>\n      <td>87</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>288</th>\n      <td>VPS</td>\n      <td>633</td>\n    </tr>\n    <tr>\n      <th>289</th>\n      <td>WRG</td>\n      <td>59</td>\n    </tr>\n    <tr>\n      <th>290</th>\n      <td>XNA</td>\n      <td>1128</td>\n    </tr>\n    <tr>\n      <th>291</th>\n      <td>YAK</td>\n      <td>57</td>\n    </tr>\n    <tr>\n      <th>292</th>\n      <td>YUM</td>\n      <td>338</td>\n    </tr>\n  </tbody>\n</table>\n<p>293 rows × 2 columns</p>\n</div>","text/plain":"    AirportFrom  Delay\n0           ABE    342\n1           ABI    211\n2           ABQ   2799\n3           ABR      2\n4           ABY     87\n..          ...    ...\n288         VPS    633\n289         WRG     59\n290         XNA   1128\n291         YAK     57\n292         YUM    338\n\n[293 rows x 2 columns]"},"exec_count":36,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":37,"id":"6f407f","input":"airlines","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Airline</th>\n      <th>Flight</th>\n      <th>AirportFrom</th>\n      <th>AirportTo</th>\n      <th>DayOfWeek</th>\n      <th>Time</th>\n      <th>Length</th>\n      <th>Delay</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CO</td>\n      <td>269</td>\n      <td>SFO</td>\n      <td>IAH</td>\n      <td>3</td>\n      <td>15</td>\n      <td>205</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>US</td>\n      <td>1558</td>\n      <td>PHX</td>\n      <td>CLT</td>\n      <td>3</td>\n      <td>15</td>\n      <td>222</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>AA</td>\n      <td>2400</td>\n      <td>LAX</td>\n      <td>DFW</td>\n      <td>3</td>\n      <td>20</td>\n      <td>165</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>AA</td>\n      <td>2466</td>\n      <td>SFO</td>\n      <td>DFW</td>\n      <td>3</td>\n      <td>20</td>\n      <td>195</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>AS</td>\n      <td>108</td>\n      <td>ANC</td>\n      <td>SEA</td>\n      <td>3</td>\n      <td>30</td>\n      <td>202</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>539378</th>\n      <td>CO</td>\n      <td>178</td>\n      <td>OGG</td>\n      <td>SNA</td>\n      <td>5</td>\n      <td>1439</td>\n      <td>326</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>539379</th>\n      <td>FL</td>\n      <td>398</td>\n      <td>SEA</td>\n      <td>ATL</td>\n      <td>5</td>\n      <td>1439</td>\n      <td>305</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>539380</th>\n      <td>FL</td>\n      <td>609</td>\n      <td>SFO</td>\n      <td>MKE</td>\n      <td>5</td>\n      <td>1439</td>\n      <td>255</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>539381</th>\n      <td>UA</td>\n      <td>78</td>\n      <td>HNL</td>\n      <td>SFO</td>\n      <td>5</td>\n      <td>1439</td>\n      <td>313</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>539382</th>\n      <td>US</td>\n      <td>1442</td>\n      <td>LAX</td>\n      <td>PHL</td>\n      <td>5</td>\n      <td>1439</td>\n      <td>301</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>539383 rows × 8 columns</p>\n</div>","text/plain":"       Airline  Flight AirportFrom AirportTo  DayOfWeek  Time  Length  Delay\n0           CO     269         SFO       IAH          3    15     205      1\n1           US    1558         PHX       CLT          3    15     222      1\n2           AA    2400         LAX       DFW          3    20     165      1\n3           AA    2466         SFO       DFW          3    20     195      1\n4           AS     108         ANC       SEA          3    30     202      0\n...        ...     ...         ...       ...        ...   ...     ...    ...\n539378      CO     178         OGG       SNA          5  1439     326      0\n539379      FL     398         SEA       ATL          5  1439     305      0\n539380      FL     609         SFO       MKE          5  1439     255      0\n539381      UA      78         HNL       SFO          5  1439     313      1\n539382      US    1442         LAX       PHL          5  1439     301      1\n\n[539383 rows x 8 columns]"},"exec_count":37,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":39,"id":"c41ba2","input":"import matplotlib.pyplot as plt\n\nairports_coordinates = pd.read_csv(\"./Data/Airport Coordinates.csv\")\nfig, ax = plt.subplots(facecolor='#FCF6F5FF')\nfig.set_size_inches(10, 5)\n\nax.scatter(airports_coordinates['LONGITUDE'], airports_coordinates['LATITUDE'], s=1, alpha=1, edgecolors='none')\nax.axis('off')\n\nplt.show()","output":{"0":{"data":{"image/png":"743a2db32d046cb75b9e835af3aec6f52cc5cc78","text/plain":"<Figure size 720x360 with 1 Axes>"},"exec_count":39,"metadata":{"image/png":{"height":286,"width":572}},"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"48dccc","input":"import matplotlib.pyplot as plt\nimport seaborn as sns","pos":2,"type":"cell"}
{"cell_type":"code","exec_count":40,"id":"f4b323","input":"# df = px.data.gapminder().query(\"year==2007\")\nairports_coordinates = pd.read_csv(\"./Data/Airport Coordinates.csv\")\n# merged = airlines.merge(right = airports_coordinates, how = 'left', left_on = 'AirportFrom', right_on = 'IATA')\n# fig = px.scatter_geo(airports_coordinates, locations=\"iso_alpha\",hover_name=\"AIRPORT\", size=\"DELAY\",projection=\"natural earth\")\n\nimport plotly.graph_objects as go\n\nimport pandas as pd\n\ndf = pd.read_csv(\"./Data/Airport Coordinates.csv\")\ndf['text'] = df['IATA'] + ',' + df['AIRPORT'] + ',' + df['DELAY'].astype(str)\n# IATA,AIRPORT,LATITUDE,LONGITUDE,DELAY ',' + df['LATITUTE'] + ',' + df['LONGITUDE'] +\n\nfig = go.Figure(data=go.Scattergeo(\n        lon = df['LONGITUDE'],\n        lat = df['LATITUDE'],\n        text = df['text'],\n        mode = 'markers',\n        marker_color = df['DELAY'],\n        ))\n\nfig.update_layout(\n        title = 'Highest Delayed Airports (United States)',\n        geo_scope='north america',\n    )\nfig.show()","output":{"0":{"data":{"iframe":"5ef87d9aa2b7e4614661709eea606df87fbd1a14"},"exec_count":40,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"f78080","input":"airlines = pd.read_csv(\"./Data/Airlines.csv\")\n\nairports_coordinates = pd.read_csv(\"./Data/Airport Coordinates.csv\")","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":73,"id":"764c64","input":"import plotly.graph_objects as go\nimport numpy as np\nimport pandas as pd\n\ndf = pd.read_csv(\"./Data/Airport Coordinates.csv\")\n\n# Create figure\nfig = go.Figure()\n\n# Add traces, one for each slider step\nfor step in np.arange(0, 5, 1):\n    fig.add_trace(\n        go.Scatter(\n            visible=False,\n            line=dict(color=\"#00CED1\", width=6),\n            name=\"𝜈 = \" + str(step),\n            x=np.arange(0, 10, 0.01),\n            y=np.sin(step * np.arange(0, 10, 0.01))))\n\n# Make 10th trace visible\nfig.data[10].visible = True\n\n# Create and add slider\nsteps = []\nfor i in range(len(fig.data)):\n    step = dict(\n        method=\"update\",\n        args=[{\"visible\": [False] * len(fig.data)},\n              {\"title\": \"Slider switched to step: \" + str(i)}],  # layout attribute\n    )\n    step[\"args\"][0][\"visible\"][i] = True  # Toggle i'th trace to \"visible\"\n    steps.append(step)\n\nsliders = [dict(\n    active=10,\n    currentvalue={\"prefix\": \"Frequency: \"},\n    pad={\"t\": 50},\n    steps=steps\n)]\n\nfig.update_layout(\n    sliders=sliders\n)\n\nfig.show()","output":{"0":{"data":{"iframe":"e49bcec1d78384008f260aa832668a7e1f4681cf"},"exec_count":73,"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":75,"id":"a8d833","input":"airports_coordinates = pd.read_csv(\"./Data/Airport Coordinates.csv\")\n\nimport plotly.graph_objects as go\n\nimport pandas as pd\n\ndf = pd.read_csv(\"./Data/Airport Coordinates.csv\")\ndf['text'] = df['IATA'] + ', ' + df['AIRPORT'] + '</br>' +  (df[\"SIZE\"]*1000).astype(str) + ' sq. ft. (sum of runway length) </br>' + df['DELAY'].astype(str) + '% delay'\n\nfig = go.Figure(data=go.Scattergeo(\n        lon = df['LONGITUDE'],\n        lat = df['LATITUDE'],\n        text = df['text'],\n        mode = 'markers',\n        marker = dict(\n            size = df['SIZE']/2,\n            opacity = 0.8,\n            reversescale = True,\n            autocolorscale = False,\n            symbol = 'circle',\n            line = dict(\n                width=0.3,\n                color='rgba(102, 102, 102)'\n            ),\n#             colorscale = [[0, 'red'], [0.25, 'orange'], [0.5, 'green'], [0.75, 'blue'], [1, 'purple']],\n            colorscale = [[0, 'red'], [0.3, 'orange'], [0.5, 'yellow'], [1, 'green']],\n            cmin = 0,\n            color = df['DELAY'],\n            cmax = df['DELAY'].max(),\n            colorbar_title=\"Likelihood of Delays<br>(In percentages)\"\n        )))\n\nfig.update_layout(\n        title = 'Most delayed United States airports!<br>(Hover for airport names)',\n        geo = dict(\n            scope='north america',\n            projection_type='albers',\n            showland = True,\n            landcolor = \"lightblue\",\n            subunitcolor = \"rgb(217, 217, 217)\",\n            countrycolor = \"rgb(217, 217, 217)\",\n            countrywidth = 0.25,\n            subunitwidth = 0.5\n        ),\n    )\nfig.show()","output":{"0":{"data":{"iframe":"848cbb62dac8547af8bfbe737355daaf8388c0e2"},"exec_count":75,"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":78,"id":"2fc8eb","input":"airports_coordinates = pd.read_csv(\"./Data/Airport Coordinates.csv\")\n\nimport plotly.graph_objects as go\n\nimport pandas as pd\n\ndf = pd.read_csv(\"./Data/Airport Coordinates.csv\")\n# df['text'] = df['IATA'] + ',' + df['AIRPORT'] + ',' + df['DELAY'].astype(str)\ndf['text'] = df['IATA'] + ', ' + df['AIRPORT'] + '</br>' + df['DELAY'].astype(str) + '% delay'\n\nfig = go.Figure(data=go.Scattergeo(\n        lon = df['LONGITUDE'],\n        lat = df['LATITUDE'],\n        text = df['text'],\n        mode = 'markers',\n        marker = dict(\n            size = 8,\n            opacity = 0.8,\n            reversescale = True,\n            autocolorscale = False,\n            symbol = 'circle',\n            line = dict(\n                width=0.3,\n                color='rgba(102, 102, 102)'\n            ),\n#             colorscale = [[0, 'red'], [0.25, 'orange'], [0.5, 'green'], [0.75, 'blue'], [1, 'purple']],\n            colorscale = [[0, 'red'], [0.3, 'orange'], [0.5, 'yellow'], [1, 'green']],\n            cmin = 0,\n            color = df['DELAY'],\n            cmax = df['DELAY'].max(),\n            colorbar_title=\"Likelihood of Delays<br>(In percentages)\"\n        )))\n\nfig.update_layout(\n        title = 'Most delayed United States airports!<br>(Hover for airport names)',\n        geo = dict(\n            scope='north america',\n            projection_type='albers',\n            showland = True,\n            landcolor = \"lightblue\",\n            subunitcolor = \"rgb(217, 217, 217)\",\n            countrycolor = \"rgb(217, 217, 217)\",\n            countrywidth = 0.25,\n            subunitwidth = 0.5\n        ),\n    )\nfig.show()","output":{"0":{"data":{"iframe":"ec328e14b6daed7621bae2a3de6692d6710742b5"},"exec_count":78,"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":88,"id":"32be32","input":"# fig = px.scatter(penguins_dataframe, x=\"Body Mass (g)\", y=\"Flipper Length (mm)\")\n\n# fig.show()\n\nairlines\n\nairports_coordinates\n\n# merged = airlines.merge(right = airports_coordinates, how = 'left', left_on = 'AirportFrom', right_on = 'IATA')\n# merged","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>IATA</th>\n      <th>AIRPORT</th>\n      <th>LATITUDE</th>\n      <th>LONGITUDE</th>\n      <th>DELAY</th>\n      <th>SIZE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ABE</td>\n      <td>Lehigh Valley International</td>\n      <td>40.652363</td>\n      <td>-75.440402</td>\n      <td>32.16374</td>\n      <td>13399</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ABI</td>\n      <td>Abilene Regional</td>\n      <td>32.411320</td>\n      <td>-99.681897</td>\n      <td>15.16588</td>\n      <td>18078</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ABQ</td>\n      <td>Albuquerque International</td>\n      <td>35.040222</td>\n      <td>-106.609194</td>\n      <td>49.12469</td>\n      <td>29793</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ABY</td>\n      <td>Southwest Georgia Regional</td>\n      <td>31.535515</td>\n      <td>-84.194473</td>\n      <td>25.28736</td>\n      <td>11820</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ACT</td>\n      <td>Waco Regional</td>\n      <td>31.611288</td>\n      <td>-97.230519</td>\n      <td>28.33333</td>\n      <td>12210</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>287</th>\n      <td>VPS</td>\n      <td>Eglin Air Force Base</td>\n      <td>30.483250</td>\n      <td>-86.525400</td>\n      <td>33.17536</td>\n      <td>21988</td>\n    </tr>\n    <tr>\n      <th>288</th>\n      <td>WRG</td>\n      <td>Wrangell</td>\n      <td>56.484326</td>\n      <td>-132.369824</td>\n      <td>30.50847</td>\n      <td>5999</td>\n    </tr>\n    <tr>\n      <th>289</th>\n      <td>XNA</td>\n      <td>Northwest Arkansas Regional</td>\n      <td>36.281869</td>\n      <td>-94.306811</td>\n      <td>28.10284</td>\n      <td>17600</td>\n    </tr>\n    <tr>\n      <th>290</th>\n      <td>YAK</td>\n      <td>Yakutat</td>\n      <td>59.503361</td>\n      <td>-139.660226</td>\n      <td>15.78947</td>\n      <td>14220</td>\n    </tr>\n    <tr>\n      <th>291</th>\n      <td>YUM</td>\n      <td>Yuma MCAS-Yuma International</td>\n      <td>32.656583</td>\n      <td>-114.605972</td>\n      <td>27.81065</td>\n      <td>34395</td>\n    </tr>\n  </tbody>\n</table>\n<p>292 rows × 6 columns</p>\n</div>","text/plain":"    IATA                       AIRPORT   LATITUDE   LONGITUDE     DELAY   SIZE\n0    ABE   Lehigh Valley International  40.652363  -75.440402  32.16374  13399\n1    ABI              Abilene Regional  32.411320  -99.681897  15.16588  18078\n2    ABQ     Albuquerque International  35.040222 -106.609194  49.12469  29793\n3    ABY    Southwest Georgia Regional  31.535515  -84.194473  25.28736  11820\n4    ACT                 Waco Regional  31.611288  -97.230519  28.33333  12210\n..   ...                           ...        ...         ...       ...    ...\n287  VPS          Eglin Air Force Base  30.483250  -86.525400  33.17536  21988\n288  WRG                      Wrangell  56.484326 -132.369824  30.50847   5999\n289  XNA   Northwest Arkansas Regional  36.281869  -94.306811  28.10284  17600\n290  YAK                       Yakutat  59.503361 -139.660226  15.78947  14220\n291  YUM  Yuma MCAS-Yuma International  32.656583 -114.605972  27.81065  34395\n\n[292 rows x 6 columns]"},"exec_count":88,"output_type":"execute_result"}},"pos":4,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"8d589c","input":"airlines.AirportFrom.hist()","output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7f8ec4c58370>"},"exec_count":9,"output_type":"execute_result"},"1":{"data":{"image/png":"7a4db46082b7c12103bb3a16e341e2fc31f13279","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":9,"metadata":{"image/png":{"height":411,"width":729},"needs_background":"light"},"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"f3ff7d","input":"airlines.plot.scatter(x='AirportFrom',y='Delay')","output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7f4eab12a730>"},"exec_count":9,"output_type":"execute_result"},"1":{"data":{"image/png":"152264042ef52da6f4155bdc1278fcf7d94d57b3","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":9,"metadata":{"image/png":{"height":424,"width":720},"needs_background":"light"},"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"id":0,"time":1659028988358,"type":"user"}
{"last_load":1659028988792,"type":"file"}